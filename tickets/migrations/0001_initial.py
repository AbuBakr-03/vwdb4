# Generated by Django 5.2.1 on 2025-08-26 13:43

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Company name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Company description')),
                ('contact_email', models.EmailField(help_text='Primary contact email', max_length=254)),
                ('contact_phone', models.CharField(blank=True, help_text='Contact phone number', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the company is active')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
                'db_table': 'tickets_company',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='QATester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the tester is active')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qa_testers', to='tickets.company')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='qa_tester', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'QA Tester',
                'verbose_name_plural': 'QA Testers',
                'db_table': 'tickets_qa_tester',
                'ordering': ['user__username'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Short description of the issue', max_length=200)),
                ('description', models.TextField(help_text='Detailed explanation of the problem')),
                ('issue_location', models.CharField(choices=[('dashboard', 'Dashboard'), ('campaigns', 'Campaigns'), ('analytics', 'Analytics'), ('accounts', 'Accounts'), ('authorization', 'Authorization'), ('tenants', 'Tenants'), ('other', 'Other')], default='other', help_text='Module where the issue occurred', max_length=50)),
                ('additional_notes', models.TextField(blank=True, help_text='Optional notes or clarifications')),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('closed', 'Closed'), ('rejected', 'Rejected')], default='open', help_text='Current status of the ticket', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level of the ticket', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, help_text='QA personnel assigned to resolve the ticket', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(blank=True, help_text='Company associated with the ticket (for external testers)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='tickets.company')),
                ('submitter', models.ForeignKey(help_text='User who submitted the ticket', on_delete=django.db.models.deletion.CASCADE, related_name='submitted_tickets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
                'db_table': 'tickets_ticket',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Uploaded file (screenshots, documents, etc.)', upload_to='ticket_attachments/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'pdf', 'doc', 'docx', 'txt'])])),
                ('filename', models.CharField(help_text='Original filename', max_length=255)),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('uploaded_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('ticket', models.ForeignKey(help_text='Ticket this attachment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='tickets.ticket')),
                ('uploaded_by', models.ForeignKey(help_text='User who uploaded the file', on_delete=django.db.models.deletion.CASCADE, related_name='ticket_attachments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Ticket Attachment',
                'verbose_name_plural': 'Ticket Attachments',
                'db_table': 'tickets_ticket_attachment',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Comment content')),
                ('is_internal', models.BooleanField(default=False, help_text='Internal comment only visible to QA personnel')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(help_text='User who wrote the comment', on_delete=django.db.models.deletion.CASCADE, related_name='ticket_comments', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(help_text='Ticket this comment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='tickets.ticket')),
            ],
            options={
                'verbose_name': 'Ticket Comment',
                'verbose_name_plural': 'Ticket Comments',
                'db_table': 'tickets_ticket_comment',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['status'], name='tickets_tic_status_0e5646_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['priority'], name='tickets_tic_priorit_0bec9b_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['issue_location'], name='tickets_tic_issue_l_3aecf8_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['created_at'], name='tickets_tic_created_5dd600_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['submitter'], name='tickets_tic_submitt_68f44d_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['company'], name='tickets_tic_company_73eab5_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['assigned_to'], name='tickets_tic_assigne_bcac0e_idx'),
        ),
    ]
