"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-g!#v2!sn=466ez=&&bz!_%vce81dkzfcavf(7l3@f0nji&mu5&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'testserver']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dashboard',
    'campaigns',
    'authorization',
    'accounts',
    'utils',
    'people',
    'reports',
    'tools',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'authorization.consumer_middleware.TenantFlagsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "accounts.context_processors.user_permissions",
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Bahrain'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files (Uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication settings
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/campaigns/'
LOGOUT_REDIRECT_URL = '/accounts/login/'

# Tenant Management Configuration
# =============================

# URL to your tenant management system's JWKS endpoint
TENANT_MGMT_JWKS_URL = (
    "https://web-production-72006.up.railway.app/.well-known/jwks.json"
)

# URL to your tenant management system's token endpoint
TENANT_MGMT_TOKEN_URL = (
    "https://web-production-72006.up.railway.app/v1/token"
)

# Audience value that your app expects in tokens
TENANT_AUDIENCE = "watchtower"

# Cache TTL for tenant flags (default: 30 seconds)
TENANT_CACHE_SECONDS = 3000

# Client credentials for token fetching
TENANT_CLIENT_ID = "zain_bh"
TENANT_CLIENT_SECRET = "ge19[U{Z~FeN:y':\\V#oo*6VCOt"

# Company-specific tenant identifier for on-premise deployments
TENANT_ID = "zain_bh"  # This should be unique per company deployment

# Whether to validate client credentials (default: False)
TENANT_VALIDATE_CLIENT_CREDENTIALS = False

# Paths to skip token verification
TENANT_SKIP_PATHS = [
    '/admin/',
    '/static/',
    '/health/',
    '/authorization/health/',
    '/authorization/get-token/',
    '/authorization/refresh-token/',
    '/authorization/token-status/',
    '/dashboard/',
    '/accounts/',
    '/campaigns/',
    '/campaigns/create/',
    '/campaigns/list/',
    '/campaigns/edit/',
    '/campaigns/delete/',
    '/campaigns/queue/',
]

import os

# Redis configuration for campaign queue and caching
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/1")

# Redis connection settings
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", "6379"))
REDIS_DB = int(os.getenv("REDIS_DB", "1"))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD", None)

# Tenant Limits Configuration
TENANT_LIMITS = {
    "default": {
        "campaigns_per_month": 100,
        "concurrent_campaigns": 10,
        "max_calls_per_campaign": 10000,
    }
}
