# Generated by Django 5.2.5 on 2025-08-29 20:11

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('dashboard', '0005_remove_max_tokens_and_temperature'),
    ]

    operations = [
        migrations.CreateModel(
            name='WebsiteScraping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('url', models.URLField(help_text='Website URL to scrape')),
                ('name', models.CharField(help_text='Display name for the website', max_length=128)),
                ('description', models.TextField(blank=True, help_text='Optional description of the website content')),
                ('is_active', models.BooleanField(default=True)),
                ('last_scraped', models.DateTimeField(blank=True, null=True)),
                ('scraping_status', models.CharField(choices=[('pending', 'Pending'), ('scraping', 'Scraping'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('scraped_content', models.TextField(blank=True, help_text='Scraped content from the website')),
                ('content_hash', models.CharField(blank=True, help_text='Hash of the scraped content for change detection', max_length=64)),
                ('error_message', models.TextField(blank=True, help_text='Error message if scraping failed')),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata about the website')),
                ('assistant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scraped_websites', to='dashboard.assistant')),
            ],
            options={
                'indexes': [models.Index(fields=['client_id', 'assistant', 'is_active'], name='dashboard_w_client__ac469b_idx'), models.Index(fields=['client_id', 'scraping_status'], name='dashboard_w_client__b1b930_idx'), models.Index(fields=['last_scraped'], name='dashboard_w_last_sc_ed667b_idx')],
                'unique_together': {('assistant', 'url')},
            },
        ),
    ]
