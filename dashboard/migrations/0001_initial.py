# Generated by Django 5.2.5 on 2025-08-29 12:26

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Assistant',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('external_id', models.CharField(help_text='External identifier for API integrations', max_length=128, unique=True)),
                ('name', models.CharField(help_text='Human-readable assistant name', max_length=128)),
                ('slug', models.SlugField(help_text='URL-friendly identifier, auto-generated from name', max_length=128)),
                ('description', models.TextField(blank=True, help_text='Assistant description')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], db_index=True, default='draft', max_length=20)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('total_calls', models.PositiveIntegerField(default=0)),
                ('total_duration_seconds', models.PositiveIntegerField(default=0)),
                ('average_cost_per_minute', models.DecimalField(decimal_places=4, default=Decimal('0.00'), max_digits=8)),
                ('success_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_assistants', to=settings.AUTH_USER_MODEL)),
                ('published_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='published_assistants', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AnalyticsConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('summary_prompt', models.TextField(default='You are an expert note-taker. You will be given a transcript of a call. Summarize the call in 2-3 sentences, if applicable.', help_text='Prompt for call summarization')),
                ('summary_timeout_sec', models.PositiveIntegerField(default=10)),
                ('min_messages_for_summary', models.PositiveIntegerField(default=2)),
                ('success_prompt', models.TextField(default='You are an expert call evaluator. You will be given a transcript of a call and the system prompt of the AI participant. Determine if the call was successful based on the objectives inferred from the system prompt.', help_text='Prompt for success evaluation')),
                ('success_rubric', models.CharField(choices=[('numeric', 'Numeric Scale (1-10)'), ('binary', 'Binary (Success/Failure)'), ('percentage', 'Percentage (0-100%)'), ('custom', 'Custom')], default='numeric', max_length=20)),
                ('success_timeout_sec', models.PositiveIntegerField(default=11)),
                ('structured_prompt', models.TextField(blank=True, help_text='Prompt for extracting structured data')),
                ('structured_schema', models.JSONField(blank=True, default=list, help_text='JSON schema for structured data extraction')),
                ('structured_timeout_sec', models.PositiveIntegerField(default=10)),
                ('assistant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='dashboard.assistant')),
            ],
        ),
        migrations.CreateModel(
            name='AdvancedConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('start_speaking_wait_seconds', models.DecimalField(decimal_places=1, default=Decimal('0.4'), help_text='Seconds to wait before assistant starts speaking', max_digits=3)),
                ('smart_endpointing', models.CharField(choices=[('off', 'Off'), ('on', 'On'), ('auto', 'Auto')], default='off', max_length=10)),
                ('on_punctuation_seconds', models.DecimalField(decimal_places=1, default=Decimal('0.1'), max_digits=3)),
                ('on_no_punctuation_seconds', models.DecimalField(decimal_places=1, default=Decimal('1.5'), max_digits=3)),
                ('on_number_seconds', models.DecimalField(decimal_places=1, default=Decimal('0.5'), max_digits=3)),
                ('stop_speaking_words', models.PositiveIntegerField(default=10)),
                ('stop_speaking_voice_seconds', models.DecimalField(decimal_places=1, default=Decimal('0.2'), max_digits=3)),
                ('stop_speaking_backoff_seconds', models.PositiveIntegerField(default=1)),
                ('silence_timeout_seconds', models.PositiveIntegerField(default=30)),
                ('max_duration_seconds', models.PositiveIntegerField(default=600)),
                ('voicemail_detection_provider', models.CharField(choices=[('off', 'Off'), ('vapi', 'Vapi'), ('google', 'Google'), ('openai', 'OpenAI'), ('twilio', 'Twilio')], default='off', max_length=20)),
                ('keypad_input_enabled', models.BooleanField(default=True)),
                ('keypad_timeout_seconds', models.PositiveIntegerField(default=2)),
                ('keypad_delimiter', models.CharField(default='#,*', help_text='Comma-separated delimiters', max_length=5)),
                ('max_idle_messages', models.PositiveIntegerField(default=3)),
                ('idle_timeout_seconds', models.DecimalField(decimal_places=1, default=Decimal('7.5'), max_digits=4)),
                ('assistant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='advanced_config', to='dashboard.assistant')),
            ],
        ),
        migrations.CreateModel(
            name='AssistantKPI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('date', models.DateField(db_index=True)),
                ('total_calls', models.PositiveIntegerField(default=0)),
                ('successful_calls', models.PositiveIntegerField(default=0)),
                ('failed_calls', models.PositiveIntegerField(default=0)),
                ('total_duration_seconds', models.PositiveIntegerField(default=0)),
                ('average_duration_seconds', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8)),
                ('average_latency_ms', models.PositiveIntegerField(default=0)),
                ('asr_word_error_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('total_cost', models.DecimalField(decimal_places=4, default=Decimal('0.00'), max_digits=10)),
                ('cost_per_minute', models.DecimalField(decimal_places=4, default=Decimal('0.00'), max_digits=8)),
                ('assistant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kpis', to='dashboard.assistant')),
            ],
        ),
        migrations.CreateModel(
            name='AssistantVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('version_number', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], max_length=20)),
                ('snapshot_data', models.JSONField(help_text='Complete configuration snapshot')),
                ('notes', models.TextField(blank=True)),
                ('assistant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='dashboard.assistant')),
                ('published_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CustomFunction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('name', models.CharField(max_length=128)),
                ('description', models.TextField()),
                ('function_schema', models.JSONField(help_text='OpenAPI function schema')),
                ('endpoint_url', models.URLField(help_text='Function execution endpoint')),
                ('is_enabled', models.BooleanField(default=True)),
                ('timeout_seconds', models.PositiveIntegerField(default=30)),
                ('assistant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_functions', to='dashboard.assistant')),
            ],
        ),
        migrations.CreateModel(
            name='FileAsset',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('file', models.FileField(upload_to='assistant_files/%Y/%m/')),
                ('file_type', models.CharField(max_length=64)),
                ('size_bytes', models.PositiveIntegerField()),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('metadata', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'indexes': [models.Index(fields=['client_id', 'processing_status'], name='dashboard_f_client__001759_idx')],
            },
        ),
        migrations.CreateModel(
            name='AssistantFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('use_for_rag', models.BooleanField(default=True)),
                ('priority', models.PositiveIntegerField(default=0)),
                ('assistant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='dashboard.assistant')),
                ('file_asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assistants', to='dashboard.fileasset')),
            ],
        ),
        migrations.CreateModel(
            name='MessagingConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('server_url', models.URLField(blank=True)),
                ('secret_token', models.CharField(blank=True, max_length=255)),
                ('timeout_seconds', models.PositiveIntegerField(default=20)),
                ('http_headers', models.JSONField(blank=True, default=dict, help_text='Custom HTTP headers for server requests')),
                ('client_messages', models.JSONField(blank=True, default=list, help_text='Message types sent to client SDKs')),
                ('server_messages', models.JSONField(blank=True, default=list, help_text='Message types sent to server URL')),
                ('voicemail_message', models.TextField(blank=True, help_text='Message for voicemail scenarios')),
                ('end_call_message', models.TextField(blank=True, help_text='Message when call ends')),
                ('idle_messages', models.JSONField(blank=True, default=list, help_text='Messages for user inactivity')),
                ('assistant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='messaging', to='dashboard.assistant')),
            ],
        ),
        migrations.CreateModel(
            name='ModelConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('provider', models.CharField(choices=[('openai', 'OpenAI'), ('anthropic', 'Anthropic'), ('google', 'Google'), ('azure', 'Azure')], default='openai', max_length=20)),
                ('model_name', models.CharField(default='gpt-4o-realtime', help_text='Specific model version', max_length=64)),
                ('first_message_mode', models.CharField(choices=[('assistant_first', 'Assistant speaks first'), ('user_first', 'User speaks first'), ('both_speak', 'Both speak')], default='assistant_first', max_length=20)),
                ('first_message', models.TextField(blank=True, help_text='Initial message from assistant')),
                ('system_prompt', models.TextField(blank=True, help_text='System instructions for the AI')),
                ('max_tokens', models.PositiveIntegerField(default=250, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4096)])),
                ('temperature', models.DecimalField(decimal_places=2, default=Decimal('0.50'), max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('provider_settings', models.JSONField(blank=True, default=dict, help_text='Provider-specific configuration options')),
                ('assistant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='model_config', to='dashboard.assistant')),
            ],
        ),
        migrations.CreateModel(
            name='PredefinedFunctions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('enable_end_call', models.BooleanField(default=False)),
                ('enable_dial_keypad', models.BooleanField(default=False)),
                ('enable_transfer', models.BooleanField(default=False)),
                ('enable_voicemail_detection', models.BooleanField(default=False)),
                ('forwarding_country', models.CharField(default='us', help_text='ISO country code', max_length=2)),
                ('forwarding_number', models.CharField(blank=True, help_text='Phone number for call forwarding', max_length=20)),
                ('assistant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='predefined_functions', to='dashboard.assistant')),
            ],
        ),
        migrations.CreateModel(
            name='PrivacyConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('hipaa_enabled', models.BooleanField(default=False, help_text='HIPAA compliance mode - no logs/recordings stored')),
                ('pci_enabled', models.BooleanField(default=False, help_text='PCI compliance mode - restricted providers only')),
                ('audio_recording', models.BooleanField(default=True)),
                ('video_recording', models.BooleanField(default=False)),
                ('audio_format', models.CharField(choices=[('wav', 'WAV'), ('mp3', 'MP3'), ('flac', 'FLAC'), ('ogg', 'OGG')], default='wav', max_length=10)),
                ('data_retention_days', models.PositiveIntegerField(default=90, help_text='Days to retain call data (0 = indefinite)')),
                ('auto_delete_recordings', models.BooleanField(default=False)),
                ('assistant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='privacy', to='dashboard.assistant')),
            ],
        ),
        migrations.CreateModel(
            name='ToolLibrary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('name', models.CharField(max_length=128)),
                ('description', models.TextField()),
                ('tool_type', models.CharField(choices=[('webhook', 'Webhook'), ('function', 'Function'), ('api', 'API Integration')], max_length=20)),
                ('schema', models.JSONField(help_text='OpenAPI/JSON schema definition')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'indexes': [models.Index(fields=['client_id', 'tool_type', 'is_active'], name='dashboard_t_client__3c608d_idx')],
                'unique_together': {('client_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='AssistantTool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('is_enabled', models.BooleanField(default=True)),
                ('config_overrides', models.JSONField(blank=True, default=dict, help_text='Assistant-specific tool configuration')),
                ('priority', models.PositiveIntegerField(default=0)),
                ('assistant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tools', to='dashboard.assistant')),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assistant_usages', to='dashboard.toollibrary')),
            ],
        ),
        migrations.CreateModel(
            name='TranscriberConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('provider', models.CharField(choices=[('deepgram', 'Deepgram'), ('openai', 'OpenAI Whisper'), ('assemblyai', 'AssemblyAI'), ('azure', 'Azure Speech'), ('google', 'Google Speech')], default='deepgram', max_length=20)),
                ('language', models.CharField(default='en', help_text='Primary language code (ISO 639-1)', max_length=10)),
                ('model_name', models.CharField(default='nova-3', help_text='Transcription model version', max_length=64)),
                ('background_denoising', models.BooleanField(default=True)),
                ('confidence_threshold', models.DecimalField(decimal_places=2, default=Decimal('0.40'), max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('use_numerals', models.BooleanField(default=True, help_text='Convert spoken numbers to digits')),
                ('keyterms', models.JSONField(blank=True, default=list, help_text='Important terms for transcription accuracy')),
                ('provider_settings', models.JSONField(blank=True, default=dict, help_text='Provider-specific transcription options')),
                ('assistant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stt_config', to='dashboard.assistant')),
            ],
        ),
        migrations.CreateModel(
            name='VoiceConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('client_id', models.CharField(db_index=True, help_text='Tenant/client identifier for multi-tenant scoping', max_length=64)),
                ('provider', models.CharField(choices=[('vapi', 'Vapi'), ('elevenlabs', 'ElevenLabs'), ('azure', 'Azure'), ('aws', 'AWS Polly'), ('google', 'Google')], default='vapi', max_length=20)),
                ('voice', models.CharField(default='Elliot', help_text='Voice model identifier', max_length=64)),
                ('background_sound', models.CharField(choices=[('default', 'Default'), ('office', 'Office Ambiance'), ('cafe', 'Cafe Noise'), ('nature', 'Nature Sounds'), ('rain', 'Rain'), ('none', 'None'), ('custom', 'Custom URL')], default='default', max_length=20)),
                ('background_sound_url', models.URLField(blank=True, help_text='Custom background sound URL')),
                ('input_min_characters', models.PositiveIntegerField(default=30, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('punctuation_boundaries', models.JSONField(blank=True, default=list, help_text='Punctuation marks for speech chunking')),
                ('provider_settings', models.JSONField(blank=True, default=dict, help_text='Provider-specific voice configuration')),
                ('assistant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='voice_config', to='dashboard.assistant')),
            ],
        ),
        migrations.AddIndex(
            model_name='assistant',
            index=models.Index(fields=['client_id', 'status'], name='dashboard_a_client__45e7da_idx'),
        ),
        migrations.AddIndex(
            model_name='assistant',
            index=models.Index(fields=['client_id', 'owner'], name='dashboard_a_client__fd166f_idx'),
        ),
        migrations.AddIndex(
            model_name='assistant',
            index=models.Index(fields=['external_id'], name='dashboard_a_externa_ac697c_idx'),
        ),
        migrations.AddIndex(
            model_name='assistant',
            index=models.Index(fields=['slug'], name='dashboard_a_slug_f4ec23_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='assistant',
            unique_together={('client_id', 'slug')},
        ),
        migrations.AddIndex(
            model_name='analyticsconfig',
            index=models.Index(fields=['client_id'], name='dashboard_a_client__c7fb8a_idx'),
        ),
        migrations.AddIndex(
            model_name='advancedconfig',
            index=models.Index(fields=['client_id'], name='dashboard_a_client__7f6ad7_idx'),
        ),
        migrations.AddIndex(
            model_name='assistantkpi',
            index=models.Index(fields=['client_id', 'date'], name='dashboard_a_client__133f1c_idx'),
        ),
        migrations.AddIndex(
            model_name='assistantkpi',
            index=models.Index(fields=['assistant', 'date'], name='dashboard_a_assista_8a1e76_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='assistantkpi',
            unique_together={('assistant', 'date')},
        ),
        migrations.AddIndex(
            model_name='assistantversion',
            index=models.Index(fields=['client_id', 'assistant', 'status'], name='dashboard_a_client__c920f0_idx'),
        ),
        migrations.AddIndex(
            model_name='assistantversion',
            index=models.Index(fields=['created_at'], name='dashboard_a_created_ddf792_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='assistantversion',
            unique_together={('assistant', 'version_number')},
        ),
        migrations.AddIndex(
            model_name='customfunction',
            index=models.Index(fields=['client_id', 'assistant', 'is_enabled'], name='dashboard_c_client__3e905e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='customfunction',
            unique_together={('assistant', 'name')},
        ),
        migrations.AddIndex(
            model_name='assistantfile',
            index=models.Index(fields=['client_id', 'assistant'], name='dashboard_a_client__58a51d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='assistantfile',
            unique_together={('assistant', 'file_asset')},
        ),
        migrations.AddIndex(
            model_name='messagingconfig',
            index=models.Index(fields=['client_id'], name='dashboard_m_client__d2e796_idx'),
        ),
        migrations.AddIndex(
            model_name='modelconfig',
            index=models.Index(fields=['client_id', 'provider'], name='dashboard_m_client__d30dda_idx'),
        ),
        migrations.AddIndex(
            model_name='predefinedfunctions',
            index=models.Index(fields=['client_id'], name='dashboard_p_client__5a53a1_idx'),
        ),
        migrations.AddIndex(
            model_name='privacyconfig',
            index=models.Index(fields=['client_id', 'hipaa_enabled'], name='dashboard_p_client__7b6d5e_idx'),
        ),
        migrations.AddIndex(
            model_name='privacyconfig',
            index=models.Index(fields=['client_id', 'pci_enabled'], name='dashboard_p_client__92743a_idx'),
        ),
        migrations.AddIndex(
            model_name='assistanttool',
            index=models.Index(fields=['client_id', 'assistant', 'is_enabled'], name='dashboard_a_client__07f13d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='assistanttool',
            unique_together={('assistant', 'tool')},
        ),
        migrations.AddIndex(
            model_name='transcriberconfig',
            index=models.Index(fields=['client_id', 'provider'], name='dashboard_t_client__7f1b22_idx'),
        ),
        migrations.AddIndex(
            model_name='voiceconfig',
            index=models.Index(fields=['client_id', 'provider'], name='dashboard_v_client__da272c_idx'),
        ),
    ]
